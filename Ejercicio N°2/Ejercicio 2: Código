# Modelado de Inmuebles con herencia

class Inmueble:
    def __init__(self, identificador, area, direccion):
        self._identificador = identificador
        self._area = area
        self._direccion = direccion
        self._precio_venta = 0

    def calcular_precio_venta(self, valor_area):
        self._precio_venta = self._area * valor_area
        return self._precio_venta

    def imprimir(self):
        print(f"Identificador inmobiliario = {self._identificador}")
        print(f"Área = {self._area} m²")
        print(f"Dirección = {self._direccion}")
        print(f"Precio de venta = ${self._precio_venta}")


class InmuebleVivienda(Inmueble):
    def __init__(self, identificador, area, direccion, habitaciones, banos):
        super().__init__(identificador, area, direccion)
        self._habitaciones = habitaciones
        self._banos = banos

    def imprimir(self):
        super().imprimir()
        print(f"Número de habitaciones = {self._habitaciones}")
        print(f"Número de baños = {self._banos}")


class Casa(InmuebleVivienda):
    def __init__(self, identificador, area, direccion, habitaciones, banos, pisos):
        super().__init__(identificador, area, direccion, habitaciones, banos)
        self._pisos = pisos

    def imprimir(self):
        super().imprimir()
        print(f"Número de pisos = {self._pisos}")


class Apartamento(InmuebleVivienda):
    def __init__(self, identificador, area, direccion, habitaciones, banos):
        super().__init__(identificador, area, direccion, habitaciones, banos)

    def imprimir(self):
        super().imprimir()


class CasaRural(Casa):
    valor_area = 1500000

    def __init__(self, identificador, area, direccion, habitaciones, banos, pisos, distancia, altitud):
        super().__init__(identificador, area, direccion, habitaciones, banos, pisos)
        self._distancia = distancia
        self._altitud = altitud

    def imprimir(self):
        super().imprimir()
        print(f"Distancia a cabecera municipal = {self._distancia} km")
        print(f"Altitud sobre el nivel del mar = {self._altitud} m\n")


class CasaUrbana(Casa):
    def __init__(self, identificador, area, direccion, habitaciones, banos, pisos):
        super().__init__(identificador, area, direccion, habitaciones, banos, pisos)

    def imprimir(self):
        super().imprimir()


class CasaConjuntoCerrado(CasaUrbana):
    valor_area = 2500000

    def __init__(self, identificador, area, direccion, habitaciones, banos, pisos, valor_admin, piscina, deportivos):
        super().__init__(identificador, area, direccion, habitaciones, banos, pisos)
        self._valor_admin = valor_admin
        self._piscina = piscina
        self._deportivos = deportivos

    def imprimir(self):
        super().imprimir()
        print(f"Valor de administración = ${self._valor_admin}")
        print(f"Tiene piscina? = {self._piscina}")
        print(f"Tiene campos deportivos? = {self._deportivos}\n")


class CasaIndependiente(CasaUrbana):
    valor_area = 3000000

    def __init__(self, identificador, area, direccion, habitaciones, banos, pisos):
        super().__init__(identificador, area, direccion, habitaciones, banos, pisos)

    def imprimir(self):
        super().imprimir()
        print()


class ApartamentoFamiliar(Apartamento):
    valor_area = 2000000

    def __init__(self, identificador, area, direccion, habitaciones, banos, valor_admin):
        super().__init__(identificador, area, direccion, habitaciones, banos)
        self._valor_admin = valor_admin

    def imprimir(self):
        super().imprimir()
        print(f"Valor de administración = ${self._valor_admin}\n")


class Apartaestudio(Apartamento):
    valor_area = 1500000

    def __init__(self, identificador, area, direccion):
        super().__init__(identificador, area, direccion, 1, 1)

    def imprimir(self):
        super().imprimir()
        print()


class Local(Inmueble):
    def __init__(self, identificador, area, direccion, tipo_local):
        super().__init__(identificador, area, direccion)
        self._tipo_local = tipo_local  # "INTERNO" o "CALLE"

    def imprimir(self):
        super().imprimir()
        print(f"Tipo de local = {self._tipo_local}")


class LocalComercial(Local):
    valor_area = 3000000

    def __init__(self, identificador, area, direccion, tipo_local, centro_comercial):
        super().__init__(identificador, area, direccion, tipo_local)
        self._centro_comercial = centro_comercial

    def imprimir(self):
        super().imprimir()
        print(f"Centro comercial = {self._centro_comercial}\n")


class Oficina(Local):
    valor_area = 3500000

    def __init__(self, identificador, area, direccion, tipo_local, es_gobierno):
        super().__init__(identificador, area, direccion, tipo_local)
        self._es_gobierno = es_gobierno

    def imprimir(self):
        super().imprimir()
        print(f"Es oficina gubernamental? = {self._es_gobierno}\n")


# -----------------------------------
# Prueba del sistema de inmuebles
# -----------------------------------
def main():
    print("---- Apartamento Familiar ----")
    apto = ApartamentoFamiliar(103067, 120, "Avenida Santander 45-45", 3, 2, 200000)
    apto.calcular_precio_venta(ApartamentoFamiliar.valor_area)
    apto.imprimir()

    print("---- Apartaestudio ----")
    aptestudio = Apartaestudio(12354, 50, "Avenida Caracas 30-15")
    aptestudio.calcular_precio_venta(Apartaestudio.valor_area)
    aptestudio.imprimir()

    print("---- Casa Conjunto Cerrado ----")
    casa = CasaConjuntoCerrado(54321, 180, "Calle 100 #25-50", 4, 3, 2, 350000, True, True)
    casa.calcular_precio_venta(CasaConjuntoCerrado.valor_area)
    casa.imprimir()

    print("---- Local Comercial ----")
    local = LocalComercial(99988, 70, "Centro Comercial La Estrella", "CALLE", "La Estrella")
    local.calcular_precio_venta(LocalComercial.valor_area)
    local.imprimir()

    print("---- Oficina Gubernamental ----")
    oficina = Oficina(88877, 90, "Carrera 10 #20-30", "INTERNO", True)
    oficina.calcular_precio_venta(Oficina.valor_area)
    oficina.imprimir()


if __name__ == "__main__":
    main()
